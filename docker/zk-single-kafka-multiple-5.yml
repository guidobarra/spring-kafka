version: '3.9'

services:
  zookeeper_1:
    image: confluentinc/cp-zookeeper:5.5.0
    container_name: zookeeper_1
    hostname: zookeeper_1
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: INFO
      # ZOOKEEPER_LOG4J_LOGGERS: "INFO,CONSOLE,ROLLINGFILE" -- No Include
    ports:
      - "2181:2181"
    volumes:
    - volume_zk_single_kafka_multiple_zookeeper_1:/var/lib/zookeeper # /etc/kafka/ and /logs and /var/lib/zookeeper/data and /var/lib/zookeeper/log/
    networks:
      - network_zk_single_kafka_multiple_5
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 5s

  kafka_1:
    image: confluentinc/cp-kafka:5.5.0
    container_name: kafka_1
    hostname: kafka_1
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper_1:2181"
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka_1:29092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      # KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - volume_zk_single_kafka_multiple_kafka_1:/var # dir /var/log/kafka and /var/lib/kafka/data
    depends_on:
      - zookeeper_1
    networks:
      - network_zk_single_kafka_multiple_5
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 5s

  kafka_2:
    image: confluentinc/cp-kafka:5.5.0
    container_name: kafka_2
    hostname: kafka_2
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper_1:2181"
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka_2:29093,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      # KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9093:9093"
      - "29093:29093"
    volumes:
      - volume_zk_single_kafka_multiple_kafka_2:/var
    depends_on:
      - zookeeper_1
    networks:
      - network_zk_single_kafka_multiple_5
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 5s

  kafka_3:
    image: confluentinc/cp-kafka:5.5.0
    container_name: kafka_3
    hostname: kafka_3
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper_1:2181"
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka_3:29094,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      # KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9094:9094"
      - "29094:29094"
    volumes:
      - volume_zk_single_kafka_multiple_kafka_2:/var
    depends_on:
      - zookeeper_1
    networks:
      - network_zk_single_kafka_multiple_5
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 5s

  kafka_4:
    image: confluentinc/cp-kafka:5.5.0
    container_name: kafka_4
    hostname: kafka_4
    environment:
      KAFKA_BROKER_ID: 4
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper_1:2181"
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka_4:29095,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      # KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9095:9095"
      - "29095:29095"
    volumes:
      - volume_zk_single_kafka_multiple_kafka_4:/var
    depends_on:
      - zookeeper_1
    networks:
      - network_zk_single_kafka_multiple_5
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 5s

  kafka_5:
    image: confluentinc/cp-kafka:5.5.0
    container_name: kafka_5
    hostname: kafka_5
    environment:
      KAFKA_BROKER_ID: 5
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper_1:2181"
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka_5:29096,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9096
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      # KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9096:9096"
      - "29096:29096"
    volumes:
      - volume_zk_single_kafka_multiple_kafka_5:/var
    depends_on:
      - zookeeper_1
      - kafka_1
      - kafka_2
      - kafka_3
      - kafka_4
    networks:
      - network_zk_single_kafka_multiple_5
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 5s

  #setup kafka, create topic. the app java create topic myTopic
  kafka_setup:
    image: confluentinc/cp-kafka:5.5.0
    container_name: kafka_setup
    hostname: kafka_setup
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    command: "bash -c 'echo creating topic myTopic... &&
                           kafka-topics --create --if-not-exists \
                           --zookeeper zookeeper_1:2181 \
                           --partitions 6 \
                           --replication-factor 3 \
                           --topic myTopic'"
    restart: on-failure
    volumes:
      - volume_zk_single_kafka_multiple_kafka_setup:/var
    depends_on:
      - zookeeper_1
      - kafka_1
      - kafka_2
      - kafka_3
      - kafka_4
      - kafka_5
    networks:
      - network_zk_single_kafka_multiple_5

  spring_kafka_1:
    image: spring_kafka:v1
    container_name: spring_kafka_1
    build:
      context: ../
      dockerfile: ./docker/dockerfile/Dockerfile
    ports:
      - "9290:9290"
    deploy:
      restart_policy:
        delay: 20s
    depends_on:
      - zookeeper_1
      - kafka_1
      - kafka_2
      - kafka_3
      - kafka_4
      - kafka_5

  spring_kafka_2:
    image: spring_kafka:v1
    container_name: spring_kafka_2
    deploy:
      restart_policy:
        delay: 20s
    build:
      context: ../
      dockerfile: ./docker/dockerfile/Dockerfile
    ports:
      - "9291:9290"
    depends_on:
      - zookeeper_1
      - kafka_1
      - kafka_2
      - kafka_3
      - kafka_4
      - kafka_5

volumes:
  volume_zk_single_kafka_multiple_kafka_1:
    driver: local
    name: volume_zk_single_kafka_multiple_kafka_1
  volume_zk_single_kafka_multiple_kafka_2:
    driver: local
    name: volume_zk_single_kafka_multiple_kafka_2
  volume_zk_single_kafka_multiple_kafka_3:
    driver: local
    name: volume_zk_single_kafka_multiple_kafka_3
  volume_zk_single_kafka_multiple_kafka_4:
    driver: local
    name: volume_zk_single_kafka_multiple_kafka_4
  volume_zk_single_kafka_multiple_kafka_5:
    driver: local
    name: volume_zk_single_kafka_multiple_kafka_5
  volume_zk_single_kafka_multiple_kafka_setup:
    driver: local
    name: volume_zk_single_kafka_multiple_kafka_setup
  volume_zk_single_kafka_multiple_zookeeper_1:
    driver: local
    name: volume_zk_single_kafka_multiple_zookeeper_1

networks:
  network_zk_single_kafka_multiple_5:
    driver: bridge
    name: network_zk_single_kafka_multiple_5